// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// djtag_tdo //
// --------- //

#define djtag_tdo_wrap_target 0
#define djtag_tdo_wrap 5

static const uint16_t djtag_tdo_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x7020, //  1: out    x, 32           side 0     
    0x7001, //  2: out    pins, 1         side 0     
    0x5901, //  3: in     pins, 1         side 1 [1] 
    0x1042, //  4: jmp    x--, 2          side 0     
    0x9020, //  5: push   block           side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program djtag_tdo_program = {
    .instructions = djtag_tdo_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config djtag_tdo_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + djtag_tdo_wrap_target, offset + djtag_tdo_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/gpio.h"
static inline void pio_jtag_init(PIO pio, uint sm,
        uint16_t clkdiv, uint pin_tck, uint pin_tdi, uint pin_tdo) {
    uint prog_offs = pio_add_program(pio, &djtag_tdo_program);
    pio_sm_config c = djtag_tdo_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_tdi, 1);
    sm_config_set_in_pins(&c, pin_tdo);
    sm_config_set_sideset_pins(&c, pin_tck);
    //(shift to left, auto push/pull, threshold=nbits)
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_in_shift(&c, false, true, 8);
    sm_config_set_clkdiv_int_frac(&c, clkdiv, 0);
    // TDI, TCK output are low, TDO is input
    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << pin_tck) | (1u << pin_tdi));
    pio_sm_set_pindirs_with_mask(pio, sm, (1u << pin_tck) | (1u << pin_tdi), (1u << pin_tck) | (1u << pin_tdi) | (1u << pin_tdo));
    pio_gpio_init(pio, pin_tdi);
    //pio_gpio_init(pio, pin_tdo);
    pio_gpio_init(pio, pin_tck);
    // jtag is synchronous, so bypass input synchroniser to reduce input delay.
    hw_set_bits(&pio->input_sync_bypass, 1u << pin_tdo);
    gpio_set_pulls(pin_tdo, false, true); //TDO is pulled down
    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

