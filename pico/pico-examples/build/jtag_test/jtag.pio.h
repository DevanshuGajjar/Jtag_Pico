// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// state_transition //
// ---------------- //

#define state_transition_wrap_target 0
#define state_transition_wrap 5

static const uint16_t state_transition_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6020, //  1: out    x, 32                      
    0x80a0, //  2: pull   block                      
    0x7801, //  3: out    pins, 1         side 1     
    0xf000, //  4: set    pins, 0         side 0     
    0x0043, //  5: jmp    x--, 3                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program state_transition_program = {
    .instructions = state_transition_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config state_transition_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + state_transition_wrap_target, offset + state_transition_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

// ---- //
// jtag //
// ---- //

#define jtag_wrap_target 0
#define jtag_wrap 6

static const uint16_t jtag_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xe027, //  1: set    x, 7                       
    0x7901, //  2: out    pins, 1         side 1 [1] 
    0x5001, //  3: in     pins, 1         side 0     
    0xf000, //  4: set    pins, 0         side 0     
    0x0042, //  5: jmp    x--, 2                     
    0x8020, //  6: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program jtag_program = {
    .instructions = jtag_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config jtag_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + jtag_wrap_target, offset + jtag_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/gpio.h"
static inline void pio_jtag_init(PIO pio, uint sm, uint prog_offs) {
    pio_sm_config c = jtag_program_get_default_config(prog_offs);
    sm_config_set_sideset_pins(&c, 1);
    sm_config_set_set_pins(&c,4,1);
    sm_config_set_out_pins(&c, 4,2);
    sm_config_set_in_pins(&c, 3);
    sm_config_set_out_shift(&c, true, false, 8);
    sm_config_set_clkdiv(&c, 20.0);
    pio_sm_set_pindirs_with_mask(pio, sm, (1u << 4) | (1u << 1) |(1u << 5) , (1u << 4) | (1u << 1)| (1u << 5));
    pio_gpio_init(pio, 4);
    pio_gpio_init(pio, 1);
    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 5);
    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void pio_state_transition_init(PIO pio, uint sm, uint prog_offs) {
    pio_sm_config c = state_transition_program_get_default_config(prog_offs);
    sm_config_set_sideset_pins(&c, 1);
    sm_config_set_set_pins(&c,2,1);
    sm_config_set_out_pins(&c, 2, 1);
    sm_config_set_clkdiv(&c, 20.0);
    pio_sm_set_pindirs_with_mask(pio, sm, (1u << 2) | (1u << 1) , (1u << 2) | (1u << 1));
    pio_gpio_init(pio, 2);
    pio_gpio_init(pio, 1);
    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

